
;a) Write twice the n-th element of a linear list. Example: for (10 20 30 40 50) and n=3 will produce (10 20 30 30 40 50).

; doublenth(list, n) { list[1] + list, n==0
;                    { list[1] + doublenth(list, n-1), n!=0
;                    { [], list is empty
;doublenth(list = LIST, n - number)
;doublenth(i,i)


(defun doublenth(list number)
    (cond 
        ((null list) nil)
        ((/= number 1) (append (list (car list)) (doublenth (cdr list) (- number 1)))) 
        ((= number 1)  (append (list (car list)) list ))
        ) 
    )

(print (doublenth '(1 2 3 4 5 6 7 8) 3))

;b) Write a function to return an association list with the two lists given as parameters. Example: (A B C) (X Y Z) --> ((A.X) (B.Y) (C.Z)).

; combine(list1, list2) { list1, list2 is empty 
;                       { list2, list1 is empty
;                       { (list1[0] . list2[0]) + combine(list1[2:], list2[2:])

(defun combine(list1 list2)
    (cond 
        ((null list1) list2)
        ((null list2) list1)
        (t (append (list (cons (car list1) (car list2))) (combine (cdr list1) (cdr list2) ) ))
     )
)

(print (combine '(1 2 3) '(a b c) ))
(print (combine '(1 2 3) '(a b c 2 4) ))
;c) Write a function to determine the number of all sublists of a given list, on any level.
; A sublist is either the list itself, or any element that is a list, at any level. Example:
; (1 2 (3 (4 5) (6 7)) 8 (9 10)) => 5 lists:
;(list itself, (3 ...), (4 5), (6 7), (9 10)).

;     sublists(list) { sublists(list[2:]), list[1] number
;                    { 1 + sublist(list[1]) + sublist(list[2:]), list[1] list
;                    { 0, list is empty

;    sublistswrap(list) - 1+sublists(list)

(defun sublists(list1)
    (cond
        ((null list1) 0)
        ((numberp (car list1)) (sublists (cdr list1)))
        (t (+ 1 (sublists (car list1)) (sublists (cdr list1))))
    )
)
(print(+ 1 (sublists '(1 2 (3 (4 5) (6 7)) 8 (9 10)) ) ))
;d) Write a function to return the number of all numerical atoms in a list at superficial level.

;    atoms(list) { 1+atoms(list[2:]), list[1] number
;                { atoms(list[2:], list[1] not number
;                { 0, list is empty


(defun atoms(list)
    (cond
         ((null list) 0)
         ((numberp (car list)) (+ 1 (atoms(cdr list))))
         (t (atoms (cdr list)))
    )
)

(print (atoms '( 1 2 a b (1 2 3) (1 24 5) c) ))